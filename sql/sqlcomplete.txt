1.create table--

show create table;
--+
| emp   | CREATE TABLE `emp` (
  `name` varchar(20) NOT NULL,
  `no` int NOT NULL,
  `city` varchar(30) DEFAULT 'nsk',
  `salary` int NOT NULL,
  PRIMARY KEY (`no`)

mysql> CREATE TABLE emp(
    -> id int AUTO_INCREMENT,
    -> firstname varchar(20) not null,
    -> middlename varchar(10),
    -> lastname varchar(10) not null,
    -> age int not null,
    -> salary int not null,
    -> city varchar(20) not null default 'nsk',
    -> PRIMARY KEY(id));
Query OK, 0 rows affected (0.03 sec)




2.alter statement
mysql> ALTER TABLE emp
    -> MODIFY city VARCHAR(30) DEFAULT 'nsk';
Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0
mysql> desc emp ;
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| id         | int         | NO   | PRI | NULL    | auto_increment |
| firstname  | varchar(20) | NO   |     | NULL    |                |
| middlename | varchar(10) | YES  |     | NULL    |                |
| lastname   | varchar(10) | NO   |     | NULL    |                |
| age        | int         | NO   |     | NULL    |                |
| salary     | int         | NO   |     | NULL    |                |
| city       | varchar(20) | NO   |     | nsk     |                |
+------------+-------------+------+-----+---------+----------------+
7 rows in set (0.00 sec)


3. insert statement;
mysql> INSERT INTO emp(name,no,city,salary)VALUE("pav",20,"hyd",70000);
Query OK, 1 row affected (0.00 sec)

--------------------
primary key:
.not null always
.



--------------------
unique key;
.unique key only 1 null value take
.we can have multiple unique key in table but only one primary key

mysql> create table demo(
    -> id int ,
    -> firstname varchar(20) not null,
    -> lastname varchar(10) not null,
    -> age int not null,
    -> unique key(id)
    -> );

mysql> select * from demo;
+------+-----------+----------+-----+
| id   | firstname | lastname | age |
+------+-----------+----------+-----+
|    1 | pav       | khi      |  29 |
| NULL | md        | dho      |  29 |
| NULL | ch        | jd       |  29 |
+------+-----------+----------+-----+
3 rows in set (0.00 sec)

.see here multiple null value can pass in unique key

-----------------------------------------------------------------
CRUD operation 
create read update delete


-------------create:
mysql> use demo
Database changed
mysql> create table emp(
    -> id int not null,
    -> firstname varchar(20) not null,
    -> lastname varchar(20) not null,
    -> age int not null,
    -> salary int not null,
    -> city varchar(20) not null default "nsk",
    -> primary key(id),
    -> unique key(firstname,lastname)
    -> );
Query OK, 0 rows affected (0.05 sec)

mysql> desc emp;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| id        | int         | NO   | PRI | NULL    |       |
| firstname | varchar(20) | NO   | MUL | NULL    |       |
| lastname  | varchar(20) | NO   |     | NULL    |       |
| age       | int         | NO   |     | NULL    |       |
| salary    | int         | NO   |     | NULL    |       |
| city      | varchar(20) | NO   |     | nsk     |       |
+-----------+-------------+------+-----+---------+-------+
6 rows in set

mysql> insert into emp(id, firstname,lastname,age,salary)value(1,"pav","khai",29,70000)
    -> ;
Query OK, 1 row affected (0.01 sec)

mysql> insert into emp(id, firstname,lastname,age,salary,city)value(3,"md","dho",29,75000,"pune");
Query OK, 1 row affected (0.01 sec)

mysql> insert into emp(id, firstname,lastname,age,salary,city)value(8,"ch","jd",29,73000,"hyd");



-----------------------------------
read:

mysql> select * from emp ;
+----+-----------+----------+-----+--------+------+
| id | firstname | lastname | age | salary | city |
+----+-----------+----------+-----+--------+------+
|  1 | pav       | khai     |  29 |  70000 | nsk  |
|  3 | md        | dho      |  29 |  75000 | pune |
|  8 | ch        | jd       |  29 |  73000 | hyd  |
+----+-----------+----------+-----+--------+------+
3 rows in set (0.00 sec)

mysql> select firstname from emp where salary > 71000;
+-----------+
| firstname |
+-----------+
| md        |
| ch        |
+-----------+
2 rows in set (0.00 sec)



---------------binary:

mysql> select firstname from emp where binary firstname = "Pav";
Empty set, 1 warning (0.00 sec)

mysql> select firstname from emp where binary firstname = "pav";
+-----------+
| firstname |
+-----------+
| pav       |
+-----------+
1 row in set, 1 warning (0.00 sec)


here binary is use for case sensitive read

--------------alias
mysql> select firstname as name ,lastname as surname from emp where binary firstname = "pav";
+------+---------+
| name | surname |
+------+---------+
| pav  | khai    |
+------+---------+
1 row in set, 1 warning (0.00 sec)

------------------------------------------------------------------
UPDATE

mysql> update emp set city = "pune" where id = 8;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update emp set city = "mumbai" where id = 3;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from emp;
+----+-----------+----------+-----+--------+--------+
| id | firstname | lastname | age | salary | city   |
+----+-----------+----------+-----+--------+--------+
|  1 | pav       | khai     |  29 |  70000 | hyd    |
|  3 | md        | dho      |  29 |  75000 | mumbai |
|  8 | ch        | jd       |  29 |  73000 | pune   |
+----+-----------+----------+-----+--------+--------+
3 rows in set (0.00 sec)



if we update without where cause then it will update for all table

mysql> update emp set city = "nsk";
Query OK, 3 rows affected (0.00 sec)
Rows matched: 3  Changed: 3  Warnings: 0

mysql> select * from emp;
+----+-----------+----------+-----+--------+------+
| id | firstname | lastname | age | salary | city |
+----+-----------+----------+-----+--------+------+
|  1 | pav       | khai     |  29 |  70000 | nsk  |
|  3 | md        | dho      |  29 |  75000 | nsk  |
|  8 | ch        | jd       |  29 |  73000 | nsk  |
+----+-----------+----------+-----+--------+------+
3 rows in set (0.00 sec)

-----------------------------------------------------------------
DELETE


mysql> delete from emp where id=1;
Query OK, 1 row affected (0.01 sec)

mysql> select * from demo;
+------+-----------+----------+-----+
| id   | firstname | lastname | age |
+------+-----------+----------+-----+
|    1 | pav       | khi      |  29 |
| NULL | md        | dho      |  29 |
| NULL | ch        | jd       |  29 |
+------+-----------+----------+-----+
3 rows in set (0.00 sec)

mysql> delete from demo where id = 1;
Query OK, 1 row affected (0.01 sec)

mysql> select * from demo;
+------+-----------+----------+-----+
| id   | firstname | lastname | age |
+------+-----------+----------+-----+
| NULL | md        | dho      |  29 |
| NULL | ch        | jd       |  29 |
+------+-----------+----------+-----+
2 rows in set (0.00 sec)


if we not mentaion any in where cause all Records will delete

mysql> delete from demo;
Query OK, 2 rows affected (0.02 sec)

mysql> select * from demo;
Empty set (0.00 sec)

------------------------------------------------------------------

Alter command
....alter will do structure modification

mysql> desc demo;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| id        | int         | YES  | UNI | NULL    |       |
| firstname | varchar(20) | NO   |     | NULL    |       |
| lastname  | varchar(10) | NO   |     | NULL    |       |
| age       | int         | NO   |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> alter table demo modify cloumn firstname varchar(50);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'firstname varchar(50)' at line 1
mysql>
mysql> alter table demo modify column firstname varchar(50);
Query OK, 0 rows affected (0.09 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> alter table demo add column city varchar(20) not null;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> alter table demo drop column age ;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc demo;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| id        | int         | YES  | UNI | NULL    |       |
| firstname | varchar(50) | YES  |     | NULL    |       |
| lastname  | varchar(10) | NO   |     | NULL    |       |
| city      | varchar(20) | NO   |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

-------------------------------------------------

DDL VS DML

data defination lang(DDL) ---it will change structure
                        create alter drop
                        Truncate will remove all Records  
                        truncate drop table and recreate table it is fast

data manipulation lang(DML) ---- deal with data
                      insert update delete
                      delete will delete all table it will take time

-----------------------------------------------------------------------

mysql> create table student( id int AUTO_INCREMENT, fname varchar(30) not null, mname varchar(20), lname varchar(20) not null, email varchar(30) not null, ph_no varchar(15) not null, alternative_ph_no varchar(15), enrollment_date timestamp not null, years_of_exp int not null, company_name varchar(40), batch_data varchar(20) not null, source_of_joining varchar(20) not null, location
varchar(30) not null, primary key(id), unique key(email));
Query OK, 0 rows affected (0.05 sec)


mysql> desc student;
+-------------------+-------------+------+-----+---------+----------------+
| Field             | Type        | Null | Key | Default | Extra          |
+-------------------+-------------+------+-----+---------+----------------+
| id                | int         | NO   | PRI | NULL    | auto_increment |
| fname             | varchar(30) | NO   |     | NULL    |                |
| mname             | varchar(20) | YES  |     | NULL    |                |
| lname             | varchar(20) | NO   |     | NULL    |                |
| email             | varchar(30) | NO   | UNI | NULL    |                |
| ph_no             | varchar(15) | NO   |     | NULL    |                |
| alternative_ph_no | varchar(15) | YES  |     | NULL    |                |
| enrollment_date   | timestamp   | NO   |     | NULL    |                |
| years_of_exp      | int         | NO   |     | NULL    |                |
| company_name      | varchar(40) | YES  |     | NULL    |                |
| batch_data        | varchar(20) | NO   |     | NULL    |                |
| source_of_joining | varchar(20) | NO   |     | NULL    |                |
| location          | varchar(30) | NO   |     | NULL    |                |
+-------------------+-------------+------+-----+---------+----------------+
13 rows in set (0.00 sec)

mysql> insert into student(fname,lname,email,ph_no,years_of_exp,company_name,batch_data,source_of_joining,location)value('pav','khai','pavansk00@gmail.com',8055719031,5,'ivy','20-09-2024','youtube','nsk');
ERROR 1364 (HY000): Field 'enrollment_date' doesn't have a default value
mysql> alter table student modify enrollment_date varchar(30);
Query OK, 0 rows affected (0.09 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> insert into student(fname,lname,email,ph_no,years_of_exp,company_name,batch_data,source_of_joining,location)value('pav','khai','pavansk00@gmail.com',8055719031,5,'ivy','20-09-2024','youtube','nsk');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student(fname,lname,email,ph_no,years_of_exp,company_name,batch_data,source_of_joining,location)value('md','dh','dmadhuri@gmail.com',88069
Query OK, 1 row affected (0.00 sec)

mysql> insert into student(fname,lname,email,ph_no,years_of_exp,company_name,batch_data,source_of_joining,location)value('ch','jd','chetanj@gmail.com',940002
Query OK, 1 row affected (0.01 sec)

mysql> insert into student(fname,lname,email,ph_no,years_of_exp,company_name,batch_data,source_of_joining,location)value('vb','gw','vaibhav@gmail.com',84232343243,5,'ac','20-01-2024','whatsapp','mum');
Query OK, 1 row affected (0.00 sec)

mysql> create table courses(
    -> id int not null,
    -> cname varchar(30) not null,
    -> cduration int not null,
    -> fee int not null,
    -> primary key(id)
    -> );
Query OK, 0 rows affected (0.04 sec)


------------------multi insertion-----------------
mysql> insert into courses(id, cname, cduration,fee)value
    -> (1,'big_data',3,50000),
    -> (2,'web_development', 3,30000),
    -> (3,'data_science', 4 ,40000),
    -> (4,'devops',4,10000);
Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0

=========================================================
CONSTRAINT-------------used to limit the type of data can go into a table
                       if there any voilation data will not insert.
 create TABLE
  student | CREATE TABLE `student` (
  `id` int NOT NULL AUTO_INCREMENT,
  `fname` varchar(30) NOT NULL,
  `mname` varchar(20) DEFAULT NULL,
  `lname` varchar(20) NOT NULL,
  `email` varchar(30) NOT NULL,
  `ph_no` varchar(15) NOT NULL,
  `alternative_ph_no` varchar(15) DEFAULT NULL,
  `enrollment_date` varchar(30) DEFAULT NULL,
  `years_of_exp` int NOT NULL,
  `company_name` varchar(40) DEFAULT NULL,
  `batch_data` varchar(20) NOT NULL,
  `source_of_joining` varchar(20) NOT NULL,
  `location` varchar(30) NOT NULL,
  `selected_course` int NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  KEY `selected_course` (`selected_course`),
  CONSTRAINT `student_ibfk_1` FOREIGN KEY (`selected_course`) REFERENCES `courses` (`id`)
)

----------here if we add CONSTRAINT foreign key if in couese table we have some course id and those
          course id we added in selected_course in student table 
          .if we add diff id than course id it will through error
          .if we added course id in student table which present in course table if we try to delete that courses id it will give error 
          these tow error are foreign key error.
          prevent action that would destroy link betw two TABLE
-----------the table with foreign key call child table and table with primary key call parent or ref table.

mysql> desc student
    -> ;
+-------------------+-------------+------+-----+---------+----------------+
| Field             | Type        | Null | Key | Default | Extra          |
+-------------------+-------------+------+-----+---------+----------------+
| id                | int         | NO   | PRI | NULL    | auto_increment |
| fname             | varchar(30) | NO   |     | NULL    |                |
| mname             | varchar(20) | YES  |     | NULL    |                |
| lname             | varchar(20) | NO   |     | NULL    |                |
| email             | varchar(30) | NO   | UNI | NULL    |                |
| ph_no             | varchar(15) | NO   |     | NULL    |                |
| alternative_ph_no | varchar(15) | YES  |     | NULL    |                |
| enrollment_date   | varchar(30) | YES  |     | NULL    |                |
| years_of_exp      | int         | NO   |     | NULL    |                |
| company_name      | varchar(40) | YES  |     | NULL    |                |
| batch_data        | varchar(20) | NO   |     | NULL    |                |
| source_of_joining | varchar(20) | NO   |     | NULL    |                |
| location          | varchar(30) | NO   |     | NULL    |                |
| selected_course   | int         | NO   | MUL | 1       |                |
+-------------------+-------------+------+-----+---------+----------------+
14 rows in set (0.00 sec)
==============================================================================================


1.Distinct-----------------



mysql> select location from student ;
+----------+
| location |
+----------+
| nsk      |
| thane    |
| pune     |
| mum      |
| pune     |
+----------+
5 rows in set (0.00 sec)

mysql> select distinct location from student ;
+----------+
| location |
+----------+
| nsk      |
| thane    |
| pune     |
| mum      |
+----------+
4 rows in set (0.00 sec)
-----------------------------------------------------------------
2.Order
ordering to data

mysql> select fname, years_of_exp from student order by years_of_exp ;
+-------+--------------+
| fname | years_of_exp |
+-------+--------------+
| pav   |            5 |
| md    |            5 |
| ch    |            5 |
| vb    |            5 |
| 43dg  |           23 |
+-------+--------------+
5 rows in set (0.00 sec)

mysql> select fname, years_of_exp from student order by years_of_exp desc;
+-------+--------------+
| fname | years_of_exp |
+-------+--------------+
| 43dg  |           23 |
| pav   |            5 |
| md    |            5 |
| ch    |            5 |
| vb    |            5 |
+-------+--------------+
5 rows in set (0.00 sec)


--------here we can pass order by 1 means order on 1st column
mysql> select fname, years_of_exp from student order by 1 desc;
+-------+--------------+
| fname | years_of_exp |
+-------+--------------+
| vb    |            5 |
| pav   |            5 |
| md    |            5 |
| ch    |            5 |
| 43dg  |           23 |
+-------+--------------+
5 rows in set (0.00 sec)


---------order by 2 means oder on 2nd column
mysql> select fname, years_of_exp from student order by 2 desc;
+-------+--------------+
| fname | years_of_exp |
+-------+--------------+
| 43dg  |           23 |
| pav   |            5 |
| md    |            5 |
| ch    |            5 |
| vb    |            5 |
+-------+--------------+
5 rows in set (0.00 sec)

------------here we can order the data 1st on fname and next order will be years of exp
mysql> select fname, years_of_exp from student order by fname, years_of_exp desc;
+-------+--------------+
| fname | years_of_exp |
+-------+--------------+
| 43dg  |           23 |
| ch    |            5 |
| md    |            5 |
| pav   |            5 |
| vb    |            5 |
+-------+--------------+
5 rows in set (0.00 sec)


mysql> select fname , years_of_exp, source_of_joining from student order by 2 desc limit 3;
+-------+--------------+-------------------+
| fname | years_of_exp | source_of_joining |
+-------+--------------+-------------------+
| vb    |            4 | whatsapp          |
| md    |            3 | facebook          |
| ch    |            2 | intsa             |
+-------+--------------+-------------------+
3 rows in set (0.00 sec)
-----------------------------------------------------------------------------
3.LIKE


% is wild card char.

mysql> select fname , years_of_exp, source_of_joining from student where fname LIKE '%v%';
+-------+--------------+-------------------+
| fname | years_of_exp | source_of_joining |
+-------+--------------+-------------------+
| pav   |            1 | youtube           |
| vb    |            4 | whatsapp          |
+-------+--------------+-------------------+
2 rows in set (0.00 sec)


select all Records start with p ch

mysql> select fname , years_of_exp, source_of_joining from student where fname LIKE 'p%';
+-------+--------------+-------------------+
| fname | years_of_exp | source_of_joining |
+-------+--------------+-------------------+
| pav   |            1 | youtube           |
+-------+--------------+-------------------+
1 row in set (0.00 sec)

record end with name b char
mysql> select fname , years_of_exp, source_of_joining from student where fname LIKE '%b';
+-------+--------------+-------------------+
| fname | years_of_exp | source_of_joining |
+-------+--------------+-------------------+
| vb    |            4 | whatsapp          |
+-------+--------------+-------------------+
1 row in set (0.00 sec)

if i want 2 char name in Records
here _ means one char
mysql> select fname , years_of_exp, source_of_joining from student where fname LIKE '__';
+-------+--------------+-------------------+
| fname | years_of_exp | source_of_joining |
+-------+--------------+-------------------+
| md    |            3 | facebook          |
| ch    |            2 | intsa             |
| vb    |            4 | whatsapp          |
+-------+--------------+-------------------+
3 rows in set (0.01 sec)


===========================================================================
order by and distinct

-order by with distinct not work 
-because if we use distinct  combination on fname and order by years_of_exp then internally
-it will select distinct add on both fame and years_of_exp and perform order by on years_of_exp so output will change
==================================================================================

Aggregate function

1.count

number of Recordss
mysql> select count(*) from student;
+----------+
| count(*) |
+----------+
|        4 |
+----------+

with distinct Records
mysql> select count(distinct fname) from student;
+-----------------------+
| count(distinct fname) |
+-----------------------+
|                     4 |
+-----------------------+
1 row in set (0.01 sec)

mysql> select count(*) from student where batch_data like '%07%';
+----------+
| count(*) |
+----------+
|        1 |
+----------+
1 row in set (0.01 sec)

Group by:

1.Group by statement here if we group by on location then 1st we need to select location and then we can use 
group by statement. for group by we need to add in select


eg.
mysql> select source_of_joining ,count(*) from student group by source_of_joining;
+-------------------+----------+
| source_of_joining | count(*) |
+-------------------+----------+
| youtube           |        1 |
| facebook          |        1 |
| intsa             |        1 |
| whatsapp          |        1 |
+-------------------+----------+
4 rows in set (0.01 sec)



mysql> select location ,count(*) from student group by location;
+----------+----------+
| location | count(*) |
+----------+----------+
| nsk      |        1 |
| thane    |        1 |
| pune     |        1 |
| mum      |        1 |
+----------+----------+
4 rows in set (0.00 sec)

here we selected diff field and group by on diff field getting error
mysql> select source_of_joining ,count(*) from student group by location;
ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'company.student.source_of_joining' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by


here we can use combination of both field
mysql> select location , source_of_joining, count(*) from student group by lo
cation, source_of_joining ;
+----------+-------------------+----------+
| location | source_of_joining | count(*) |
+----------+-------------------+----------+
| nsk      | youtube           |        1 |
| thane    | facebook          |        1 |
| pune     | intsa             |        1 |
| mum      | whatsapp          |        1 |
+----------+-------------------+----------+
4 rows in set (0.01 sec)


mysql> select selected_course ,batch_data,count(*) from student group by selected_course, batch_data;
+-----------------+------------+----------+
| selected_course | batch_data | count(*) |
+-----------------+------------+----------+
|               1 | 20-09-2024 |        1 |
|               1 | 20-08-2024 |        1 |
|               1 | 20-07-2024 |        1 |
|               1 | 20-01-2024 |        1 |
+-----------------+------------+----------+
4 rows in set (0.00 sec)


------------------------------------------------------
MIN,MAX
1.select min(years_of_exp), fname from student;
this is wrong 




mysql> select min(years_of_exp) from student;
+-------------------+
| min(years_of_exp) |
+-------------------+
|                 1 |
+-------------------+
1 row in set (0.00 sec)

mysql> select max(years_of_exp) from student;
+-------------------+
| max(years_of_exp) |
+-------------------+
|                 4 |
+-------------------+
1 row in set (0.00 sec)

we need Records maximum years_of_exp from source_of_joining

mysql> select source_of_joining,max(years_of_exp) from student group by source_of_joining;
+-------------------+-------------------+
| source_of_joining | max(years_of_exp) |
+-------------------+-------------------+
| youtube           |                 1 |
| facebook          |                 3 |
| intsa             |                 2 |
| whatsapp          |                 4 |
+-------------------+-------------------+
4 rows in set (0.00 sec)

-------------------------------
sum:

mysql> select selected_course, sum(years_of_exp) from student group by selected_course;
+-----------------+-------------------+
| selected_course | sum(years_of_exp) |
+-----------------+-------------------+
|               1 |                10 |
+-----------------+-------------------+
1 row in set (0.00 sec)

---------------------------------------------------
avg:


mysql> select selected_course, avg(years_of_exp) from student group by selected_course;
+-----------------+-------------------+
| selected_course | avg(years_of_exp) |
+-----------------+-------------------+
|               1 |            2.5000 |
+-----------------+-------------------+
1 row in set (0.00 sec)


==============================================================================================
Decimal data type 

mysql> create table courses_new(
    -> id int not null,
    -> cname varchar(30) not null,
    -> cduration decimal(3.2) not null,   #here 3.2 means 3 digits and 2 means after decimal point how many digit you want
    -> cfees int not null,
    -> change_at TIMESTAMP DEFAULT NOW(),
    -> primary key(id));


mysql> insert into courses_new (id,cname,cduration,cfees)values
    -> (1,'big_data', 5.5,60000),
    -> (2,'cloud', 3.5,40000),
    -> (3,'web_dev',2.5,25000),
    -> (4,'devops',2,20000);
Query OK, 4 rows affected, 3 warnings (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 3

this will give update time when we add or modify any record
mysql> ALTER TABLE courses_new MODIFY change_at TIMESTAMP DEFAULT NOW() ON UPDATE NOW();
    Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0
=============================================================================
logical operator

select * from student where years_of_exp not  between 3 and 4;\


mysql> select * from student where years_of_exp   between 3 and 4;


mysql> select * from student where years_of_exp >3  and location = 'mum'



mysql> select * from student where location in('thane','pune','mum');
+----+-------+-------+-------+--------------------+-------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
| id | fname | mname | lname | email              | ph_no       | alternative_ph_no | enrollment_date | years_of_exp | company_name | batch_data | source_of_joining | location | selected_course |
+----+-------+-------+-------+--------------------+-------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
|  2 | md    | NULL  | dh    | dmadhuri@gmail.com | 8806934512  | NULL              | NULL            |            3 | boa          | 20-08-2024 | facebook          | thane    |               1 |
|  3 | ch    | NULL  | jd    | chetanj@gmail.com  | 940002224   | NULL              | NULL            |            2 | bf           | 20-07-2024 | intsa             | pune     |               1 |
|  4 | vb    | NULL  | gw    | vaibhav@gmail.com  | 84232343243 | NULL              | NULL            |            4 | ac           | 20-01-2024 | whatsapp          | mum      |               1 |
+----+-------+-------+-------+--------------------+-------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
3 rows in set (0.00 sec)

mysql> select * from student where location not in('thane','pune','mum');
+----+-------+-------+-------+---------------------+------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
| id | fname | mname | lname | email               | ph_no      | alternative_ph_no | enrollment_date | years_of_exp | company_name | batch_data | source_of_joining | location | selected_course |
+----+-------+-------+-------+---------------------+------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
|  1 | pav   | NULL  | khai  | pavansk00@gmail.com | 8055719031 | NULL              | NULL            |            1 | ivy          | 20-09-2024 | youtube           | nsk      |               1 |
+----+-------+-------+-------+---------------------+------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
1 row in set (0.00 sec)


-----------------------------------
case statement 

1.if cduration is greater than 4 months then wecall as masters eles diploma
mysql> select cname ,cfees, cduration, case when cduration >4 then 'masters'
else 'diploma' end as ctype from courses_new;
+--------------+-------+-----------+---------+
| cname        | cfees | cduration | ctype   |
+--------------+-------+-----------+---------+
| big_data     | 60000 |         6 | masters |
| cloud        | 40000 |         4 | diploma |
| web_dev      | 25000 |         3 | diploma |
| devops       | 20000 |         2 | diploma |
| data_science | 24000 |         2 | diploma |
+--------------+-------+-----------+---------+
5 rows in set (0.00 sec)

2.product based and service based company


mysql> select fname, company_name ,
    -> case
    -> when company_name in ('ivy','bf') then 'product_base'
    -> else 'service_base'
    -> end as company_type
    -> from student;
+-------+--------------+--------------+
| fname | company_name | company_type |
+-------+--------------+--------------+
| pav   | ivy          | product_base |
| md    | boa          | service_base |
| ch    | bf           | product_base |
| vb    | ac           | service_base |
+-------+--------------+--------------+
4 rows in set (0.00 sec)


================================================================================
join


1.sub query:

mysql> select cname from courses where id = (select selected_course from student where fname = 'md');
+----------+
| cname    |
+----------+
| big_data |
+----------+
1 row in set (0.01 sec)

------------------------
join

mysql> select s.fname, c.cname from student as s join courses_new as c on s.selected_course = c.id;
+-------+----------+
| fname | cname    |
+-------+----------+
| pav   | big_data |
| md    | big_data |
| ch    | big_data |
| vb    | big_data |
+-------+----------+
4 rows in set (0.00 sec)
----------by default it is inner join

-----------------------create new table like existing table only contains are not available
                        it will add all data also same as old table

mysql> create table student_new as select * from student;
Query OK, 4 rows affected (0.05 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> desc student_new
    -> ;
+-------------------+-------------+------+-----+---------+-------+
| Field             | Type        | Null | Key | Default | Extra |
+-------------------+-------------+------+-----+---------+-------+
| id                | int         | NO   |     | 0       |       |
| fname             | varchar(30) | NO   |     | NULL    |       |
| mname             | varchar(20) | YES  |     | NULL    |       |
| lname             | varchar(20) | NO   |     | NULL    |       |
| email             | varchar(30) | NO   |     | NULL    |       |
| ph_no             | varchar(15) | NO   |     | NULL    |       |
| alternative_ph_no | varchar(15) | YES  |     | NULL    |       |
| enrollment_date   | varchar(30) | YES  |     | NULL    |       |
| years_of_exp      | int         | NO   |     | NULL    |       |
| company_name      | varchar(40) | YES  |     | NULL    |       |
| batch_data        | varchar(20) | NO   |     | NULL    |       |
| source_of_joining | varchar(20) | NO   |     | NULL    |       |
| location          | varchar(30) | NO   |     | NULL    |       |
| selected_course   | int         | NO   |     | 1       |       |
+-------------------+-------------+------+-----+---------+-------+
14 rows in set (0.00 sec)

mysql>


left and right join

mysql> select * from courses_new;
+----+--------------+-----------+-------+---------------------+
| id | cname        | cduration | cfees | change_at           |
+----+--------------+-----------+-------+---------------------+
|  1 | big_data     |         6 | 60000 | 2024-09-23 08:54:59 |
|  2 | cloud        |         4 | 40000 | 2024-09-23 08:54:59 |
|  3 | web_dev      |         3 | 25000 | 2024-09-23 08:54:59 |
|  4 | devops       |         2 | 20000 | 2024-09-23 08:54:59 |
|  5 | data_science |         2 | 24000 | 2024-09-23 09:06:26 |
+----+--------------+-----------+-------+---------------------+
5 rows in set (0.00 sec)

mysql> select * from  student_new ;
+----+-------+-------+-------+---------------------+-------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
| id | fname | mname | lname | email               | ph_no       | alternative_ph_no | enrollment_date | years_of_exp | company_name | batch_data | source_of_joining | location | selected_course |
+----+-------+-------+-------+---------------------+-------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
|  1 | pav   | NULL  | khai  | pavansk00@gmail.com | 8055719031  | NULL              | NULL            |            1 | ivy          | 20-09-2024 | youtube           | nsk      |               1 |
|  2 | md    | NULL  | dh    | dmadhuri@gmail.com  | 8806934512  | NULL              | NULL            |            3 | boa          | 20-08-2024 | facebook          | thane    |               1 |
|  3 | ch    | NULL  | jd    | chetanj@gmail.com   | 940002224   | NULL              | NULL            |            2 | bf           | 20-07-2024 | intsa             | pune     |               1 |
|  4 | vb    | NULL  | gw    | vaibhav@gmail.com   | 84232343243 | NULL              | NULL            |            4 | ac           | 20-01-2024 | whatsapp          | mum      |               1 |
+----+-------+-------+-------+---------------------+-------------+-------------------+-----------------+--------------+--------------+------------+-------------------+----------+-----------------+
4 rows in set (0.00 sec)

see diff with left and right join

mysql> select s.fname, c.cname from student as s right join courses_new as c
on s.selected_course = c.id;
+-------+--------------+
| fname | cname        |
+-------+--------------+
| vb    | big_data     |
| ch    | big_data     |
| md    | big_data     |
| pav   | big_data     |
| NULL  | cloud        |
| NULL  | web_dev      |
| NULL  | devops       |
| NULL  | data_science |
+-------+--------------+
8 rows in set (0.01 sec)

mysql> select s.fname, c.cname from student as s left join courses_new as c o
n s.selected_course = c.id;
+-------+----------+
| fname | cname    |
+-------+----------+
| pav   | big_data |
| md    | big_data |
| ch    | big_data |
| vb    | big_data |
+-------+----------+
4 rows in set (0.00 sec)


full outer join 
not possible in mysql so union we can use 

mysql> select s.fname, c.cname from student as s left join courses_new as c on s.selected_course = c.id
    -> union
    -> select s.fname, c.cname from student as s right join courses_new as c on s.selected_course = c.id;
+-------+--------------+
| fname | cname        |
+-------+--------------+
| pav   | big_data     |
| md    | big_data     |
| ch    | big_data     |
| vb    | big_data     |
| NULL  | cloud        |
| NULL  | web_dev      |
| NULL  | devops       |
| NULL  | data_science |
+-------+--------------+

cross join 

every record join with other record
mysql> select count(*) from student;
+----------+
| count(*) |
+----------+
|        4 |
+----------+
1 row in set (0.00 sec)

mysql> select count(*) from courses_new
    -> ;
+----------+
| count(*) |
+----------+
|        5 |
+----------+
1 row in set (0.00 sec)
so 4*5 20 records

select * from student, courses_new\G

 select * from student join 
 

 ==================================================================

 where and having clause

 where clause to filter out individual records brfore aggregation
 having use after group by do filtering Aggregated records

 mysql> select location ,count(*) as total from student_new group by location
having total >1;
+----------+-------+
| location | total |
+----------+-------+
| mum      |     2 |
+----------+-------+
1 row in set (0.00 sec)

mysql> select location ,count(*) as total from student_new group by location
having location = 'mum';
+----------+-------+
| location | total |
+----------+-------+
| mum      |     2 |
+----------+-------+
1 row in set (0.00 sec)

mysql> select location ,count(*) as total from student_new group by location
having location = 'nsk';
+----------+-------+
| location | total |
+----------+-------+
| nsk      |     1 |
+----------+-------+
1 row in set (0.00 sec)


---------but possible add where clause because it will help to fast it will match and then group
         but if you didnt added where and adding having like above it will group first and then check location so it may take time
         we can use where and having query also 

mysql> select location ,count(*) as total from student_new  where location= 'nsk' group by location;
+----------+-------+
| location | total |
+----------+-------+
| nsk      |     1 |
+----------+-------+
1 row in set (0.00 sec)

having with where 
i need all student record where years_of_exp greater than 1 and group by there location and same city more than 2 records

mysql> select location as total from student_new  where years_of_exp >1;
+-------+
| total |
+-------+
| mum   |
| pune  |
| mum   |
+-------+
3 rows in set (0.00 sec)

mysql> select location , count(*) as total from student_new  where years_of_exp >1 group by location;
+----------+-------+
| location | total |
+----------+-------+
| mum      |     2 |
| pune     |     1 |
+----------+-------+
2 rows in set (0.00 sec)

mysql> select location , count(*) as total from student_new  where years_of_exp >1 group by location having total>1;
+----------+-------+
| location | total |
+----------+-------+
| mum      |     2 |
+----------+-------+
1 row in set (0.00 sec)


==============================================================================


mysql> desc emp ;
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| id         | int         | NO   | PRI | NULL    | auto_increment |
| firstname  | varchar(20) | NO   |     | NULL    |                |
| middlename | varchar(10) | YES  |     | NULL    |                |
| lastname   | varchar(10) | NO   |     | NULL    |                |
| age        | int         | NO   |     | NULL    |                |
| salary     | int         | NO   |     | NULL    |                |
| city       | varchar(20) | NO   |     | nsk     |                |
+------------+-------------+------+-----+---------+----------------+
7 rows in set (0.00 sec)


need data for how many emp from which city and there avg salary
mysql> select city ,count(*) as total , avg(salary) from emp group by city;
+------+-------+-------------+
| city | total | avg(salary) |
+------+-------+-------------+
| nsk  |     1 |  70000.0000 |
| mum  |     3 |  80000.0000 |
| pune |     1 |  73000.0000 |
| nw   |     1 |  40000.0000 |
+------+-------+-------------+
4 rows in set (0.00 sec)

--------------if what we want Aggregated and nonaggregated field together
need data for how many emp from which city and there avg salary
with this need firstname and lastname also

mysql> SELECT firstname, lastname, g.city, total_count, avg_salary
    -> FROM emp
    -> JOIN (
    ->     SELECT city, COUNT(city) AS total_count, AVG(salary) AS avg_salary
    ->     FROM emp
    ->     GROUP BY city
    -> ) g ON emp.city = g.city;
+-----------+----------+------+-------------+------------+
| firstname | lastname | city | total_count | avg_salary |
+-----------+----------+------+-------------+------------+
| pav       | khi      | nsk  |           1 | 70000.0000 |
| md        | dh       | mum  |           3 | 80000.0000 |
| vb        | gw       | mum  |           3 | 80000.0000 |
| ch        | jd       | pune |           1 | 73000.0000 |
| john      | smith    | nw   |           1 | 40000.0000 |
| diw       | bd       | mum  |           3 | 80000.0000 |
+-----------+----------+------+-------------+------------+
6 rows in set (0.00 sec)

alternative  using over and partition

mysql> select firstname ,lastname,city, count(city) over(partition by city) as total,
    -> avg(salary) over(partition by city) as avg_sal
    -> from emp;
+-----------+----------+------+-------+------------+
| firstname | lastname | city | total | avg_sal    |
+-----------+----------+------+-------+------------+
| md        | dh       | mum  |     3 | 80000.0000 |
| vb        | gw       | mum  |     3 | 80000.0000 |
| diw       | bd       | mum  |     3 | 80000.0000 |
| pav       | khi      | nsk  |     1 | 70000.0000 |
| john      | smith    | nw   |     1 | 40000.0000 |
| ch        | jd       | pune |     1 | 73000.0000 |
+-----------+----------+------+-------+------------+
6 rows in set (0.00 sec)

==================================================================

Row number:
1.we should be using order by clause
2.we can also try to use partition by - optional
3.the row no start with 1 for every partion.

top 5th salary

mysql> select firstname ,lastname,salary ,  row_number() over(order by salary desc) as top_sal from emp;
+-----------+----------+--------+---------+
| firstname | lastname | salary | top_sal |
+-----------+----------+--------+---------+
| vb        | gw       |  90000 |       1 |
| md        | dh       |  75000 |       2 |
| diw       | bd       |  75000 |       3 |
| ch        | jd       |  73000 |       4 |
| pav       | khi      |  70000 |       5 |
| john      | smith    |  40000 |       6 |
+-----------+----------+--------+---------+
6 rows in set (0.00 sec)

mysql> select * from (
    -> select firstname ,lastname,salary ,  row_number() over(order by salary desc) as top_sal from emp)
    -> temptable where top_sal = 5;
+-----------+----------+--------+---------+
| firstname | lastname | salary | top_sal |
+-----------+----------+--------+---------+
| pav       | khi      |  70000 |       5 |
+-----------+----------+--------+---------+
1 row in set (0.00 sec)


top 3 salary 
mysql> select * from ( select firstname ,lastname,salary ,  row_number() over(order by salary desc) as top_sal from emp)  temptable limit 3;
+-----------+----------+--------+---------+
| firstname | lastname | salary | top_sal |
+-----------+----------+--------+---------+
| vb        | gw       |  90000 |       1 |
| md        | dh       |  75000 |       2 |
| diw       | bd       |  75000 |       3 |
+-----------+----------+--------+---------+
3 rows in set (0.00 sec)

and this data partion by city 

mysql> select firstname ,lastname,salary ,city,  row_number() over(partition
by city order by salary desc) as top_sal from emp;
+-----------+----------+--------+------+---------+
| firstname | lastname | salary | city | top_sal |
+-----------+----------+--------+------+---------+
| vb        | gw       |  90000 | mum  |       1 |
| md        | dh       |  75000 | mum  |       2 |
| diw       | bd       |  75000 | mum  |       3 |
| pav       | khi      |  70000 | nsk  |       1 |
| john      | smith    |  40000 | nw   |       1 |
| ch        | jd       |  73000 | pune |       1 |
+-----------+----------+--------+------+---------+
6 rows in set (0.00 sec)


i want to find hightest salary in each city

mysql> select *  from(  select firstname ,lastname,salary , city, row_number(
) over(partition by city order by salary desc) as top_sal from emp) temptable
 where top_sal =1;
+-----------+----------+--------+------+---------+
| firstname | lastname | salary | city | top_sal |
+-----------+----------+--------+------+---------+
| vb        | gw       |  90000 | mum  |       1 |
| pav       | khi      |  70000 | nsk  |       1 |
| john      | smith    |  40000 | nw   |       1 |
| ch        | jd       |  73000 | pune |       1 |
+-----------+----------+--------+------+---------+
4 rows in set (0.00 sec)

=======================================================================
RANK and DESE RANK

row no not solve problem of Duplicates  here we have duplicate
mysql> select firstname ,lastname,salary ,  row_number() over(order by salary desc) as top_sal from emp;
+-----------+----------+--------+---------+
| firstname | lastname | salary | top_sal |
+-----------+----------+--------+---------+
| vb        | gw       |  90000 |       1 |
| md        | dh       |  75000 |       2 |
| diw       | bd       |  75000 |       3 |
| ch        | jd       |  73000 |       4 |
| pav       | khi      |  70000 |       5 |
| john      | smith    |  40000 |       6 |
+-----------+----------+--------+---------+
6 rows in set (0.00 sec)


the rank it will assign rank same if salary is same see diff in above
in rank we may miss some order next entry skips ranks

mysql> select firstname ,lastname,salary , city, rank() over(order by salary)from emp;
+-----------+----------+--------+------+------------------------------+
| firstname | lastname | salary | city | rank() over(order by salary) |
+-----------+----------+--------+------+------------------------------+
| john      | smith    |  40000 | nw   |                            1 |
| pav       | khi      |  70000 | nsk  |                            2 |
| ch        | jd       |  73000 | pune |                            3 |
| md        | dh       |  75000 | mum  |                            4 |
| diw       | bd       |  75000 | mum  |                            4 |
| vb        | gw       |  90000 | mum  |                            6 |
+-----------+----------+--------+------+------------------------------+
6 rows in set (0.00 sec)


but in dense_rank order are proper

mysql> select firstname ,lastname,salary , city, dense_rank() over(order by salary)from emp;
+-----------+----------+--------+------+------------------------------------+
| firstname | lastname | salary | city | dense_rank() over(order by salary) |
+-----------+----------+--------+------+------------------------------------+
| john      | smith    |  40000 | nw   |                                  1 |
| pav       | khi      |  70000 | nsk  |                                  2 |
| ch        | jd       |  73000 | pune |                                  3 |
| md        | dh       |  75000 | mum  |                                  4 |
| diw       | bd       |  75000 | mum  |                                  4 |
| vb        | gw       |  90000 | mum  |                                  5 |
+-----------+----------+--------+------+------------------------------------+
6 rows in set (0.00 sec)


if dataset not duplicat then rowno(),rank(),dense_rank() give same result

top 3dr salary 
mysql> select * from ( select firstname ,lastname,salary , city, dense_rank()
 over(order by salary) as top_sal from emp)as temptable where top_sal =3;
+-----------+----------+--------+------+---------+
| firstname | lastname | salary | city | top_sal |
+-----------+----------+--------+------+---------+
| ch        | jd       |  73000 | pune |       3 |
+-----------+----------+--------+------+---------+
1 row in set (0.00 sec)

temptable ----> this is derived table


====================================================================================================
Order of ececution in sql


cluster index 
----we have only one cluster index (may be 2 coposite)--this mean it will retive 1 if record not found then retrive 2nd
    but in same table two field cluster index not possible

non-cluster index
----we can make many non-cluster index it is storing data data in some memory we can take reference from that and direct 
    fetch the data using ref.
    it may take extra overhead because we are checking in data in memory
    see in snapshot 

explain
-----



common table expression(CTE/WITH clause)
----for readable code